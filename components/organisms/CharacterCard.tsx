/**
 * @file CharacterCard.tsx
 * @description Renders the detailed view for a single character. This component is now fully data-driven,
 * rendering its sidebar actions dynamically based on the character's `components` array and the
 * central `componentRegistry`.
 */

import React from 'react';
import { useDispatch } from 'react-redux';
import { Character, PlayerAction, DataComponent, DialogueData } from '../../types';
import { toggleSuspect } from '../../store/storySlice';
import { showModal, goBack, setActiveCard } from '../../store/uiSlice';
import { AppDispatch } from '../../store';
import ImageWithLoader from '../molecules/ImageWithLoader';
import BackButton from '../atoms/BackButton';
import ToggleButton from '../atoms/ToggleButton';
import SidebarActionButton from '../atoms/SidebarActionButton';
import { useADA } from '../../hooks/useADA';
import { useCardImage } from '../../hooks/useCardImage';
import { COMPONENT_REGISTRY } from './componentRegistry';
import { History, Mic } from 'lucide-react';
import Button from '../atoms/Button';

// --- Canonical List of Character Actions ---
// This fixed array defines exactly which buttons should appear on a character card and in what order.
const CHARACTER_ACTION_KEYS = ['socialMedia', 'phoneLog', 'cctv', 'records', 'file'];

const CharacterCard: React.FC<{ character: Character }> = ({ character }) => {
  const dispatch = useDispatch<AppDispatch>();
  const triggerADA = useADA();
  const isVictim = character.role === 'victim';

  const handleGoBack = () => {
    dispatch(goBack());
    triggerADA(PlayerAction.VIEW_LIST, 'Player has returned to the previous list view.');
  };

  const handleSuspectToggle = (isNowSuspect: boolean) => {
    dispatch(toggleSuspect({ id: character.id, isSuspect: isNowSuspect }));
    const actionText = isNowSuspect ? `has marked ${character.name} as a suspect.` : `has cleared ${character.name} of suspicion.`;
    triggerADA(PlayerAction.TOGGLE_SUSPECT, actionText, character.imagePrompt);
  };

  // Special handler for replaying the introductory slideshow, a unique action for the victim.
  const handleReplayIntro = () => {
    dispatch(showModal({ type: 'introSlideshow' }));
  };
  
  const dialogueData = character.components.find(c => c.type === 'dialogue')?.props as DialogueData | undefined;
  
  const handleDialogueClick = () => {
      if (!dialogueData) return;
      // Navigate to the unified DialogueCard.
      dispatch(setActiveCard({ 
          id: character.id, 
          type: 'dialogue',
      }));
  };
  
  const colorTreatment = 'mignolaStyle'; // Force Mike Mignola style for all character cards
  const { imageUrl, isLoading } = useCardImage(character, colorTreatment);

  /**
   * --- Core Architectural Pattern: Data-Driven Sidebar Actions ---
   * The action buttons are generated by iterating through the canonical list of character-specific
   * action keys. This ensures every character card has the same consistent set of 5 buttons,
   * which are then enabled or disabled based on whether the character has the corresponding data.
   */
  const renderSidebarActions = () => {
    // Iterate over the fixed list of character action keys.
    return CHARACTER_ACTION_KEYS.map(componentType => {
      const registryEntry = COMPONENT_REGISTRY[componentType];
      if (!registryEntry) return null; // Should not happen

      // Find if this character has a data component of the current type.
      const component = character.components.find(c => c.type === componentType);
      
      // The button is disabled if the character does not have the corresponding data component.
      const isDisabled = !component;

      const handleClick = () => {
        if (isDisabled || !component) return;
        
        if (componentType === 'socialMedia') {
            dispatch(setActiveCard({ id: character.id, type: 'socialMediaFeed' }));
        } else if (componentType === 'file') {
            // A special case for the police file which shows the mugshot card.
            dispatch(setActiveCard({ id: character.id, type: 'mugshot' }));
        } else {
            // All other character actions navigate to a generic collection view.
            dispatch(setActiveCard({ 
                id: character.id, 
                type: 'collection',
                collectionType: componentType,
                title: registryEntry.label,
            }));
        }
      };

      return (
        <SidebarActionButton
          key={componentType}
          label={registryEntry.label}
          Icon={registryEntry.Icon}
          onClick={handleClick}
          disabled={isDisabled}
        />
      );
    });
  };

  return (
    <div className="w-full h-full flex flex-col bg-black animate-slide-in-bottom">
      <div className="relative w-full h-auto aspect-[3/4] flex-shrink-0 bg-brand-bg">
        <header className="absolute top-0 left-0 right-0 z-20 p-4 flex items-center bg-gradient-to-b from-black/80 to-transparent">
          <BackButton onClick={handleGoBack} />
        </header>
        
        <ImageWithLoader imageUrl={imageUrl} isLoading={isLoading} alt={character.name} colorTreatment={colorTreatment} />
        
        <div className="absolute top-1/2 right-2 -translate-y-1/2 z-10 flex flex-col gap-2">
          {renderSidebarActions()}
        </div>

        <div className="absolute inset-0 bg-gradient-to-t from-brand-surface to-transparent"></div>
      </div>

      <div className="flex-1 w-full bg-brand-surface p-4 pb-40 overflow-y-auto">
        <div className='flex justify-between items-start mb-1'>
          <div>
            <h1 className="text-3xl font-oswald text-white uppercase tracking-wider">{character.name}</h1>
            <p className="text-brand-text-muted text-lg">{character.occupation}</p>
          </div>
          {character.role === 'suspect' && (
            <div className="flex items-center gap-3 pt-1 flex-shrink-0">
              <label className="font-oswald text-brand-text uppercase tracking-wider text-sm">Suspect</label>
              <ToggleButton
                accessibleLabel={`Mark ${character.name} as a suspect`}
                toggled={character.isSuspect}
                onToggle={handleSuspectToggle}
              />
            </div>
          )}
        </div>
        
        <p className="text-white mt-4 leading-relaxed">{character.description}</p>
        
        {dialogueData && (
             <div className="mt-6 border-t border-brand-border/50 pt-6">
                <Button
                onClick={handleDialogueClick}
                className="w-full flex items-center justify-center gap-2 uppercase font-oswald tracking-wider"
                variant="primary"
                >
                <Mic size={16} />
                {dialogueData.buttonText}
                </Button>
            </div>
        )}

        {isVictim && (
          <div className="mt-6 border-t border-brand-border/50 pt-6">
            <Button
              onClick={handleReplayIntro}
              className="w-full flex items-center justify-center gap-2 uppercase font-oswald tracking-wider"
              variant="secondary"
            >
              <History size={16} />
              Replay Introduction
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default CharacterCard;